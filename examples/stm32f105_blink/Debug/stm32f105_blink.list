
stm32f105_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022fc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002510  08002510  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002518  08002518  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  0800252c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  0800252c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f32  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f4  00000000  00000000  00025faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  000278a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004f9  00000000  00000000  00027f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dbc2  00000000  00000000  00028469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000917a  00000000  00000000  0004602b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac80f  00000000  00000000  0004f1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001998  00000000  00000000  000fb9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000fd34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080024c8 	.word	0x080024c8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080024c8 	.word	0x080024c8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b972 	b.w	8000520 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14c      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d967      	bls.n	800033a <__udivmoddi4+0xe6>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b153      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	fa01 fe03 	lsl.w	lr, r1, r3
 800027c:	fa20 f202 	lsr.w	r2, r0, r2
 8000280:	ea42 0e0e 	orr.w	lr, r2, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbbe f1f7 	udiv	r1, lr, r7
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fb07 ee11 	mls	lr, r7, r1, lr
 8000296:	fb01 f005 	mul.w	r0, r1, r5
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002ac:	f080 8119 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8116 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002c0:	fb07 2210 	mls	r2, r7, r0, r2
 80002c4:	fb00 f505 	mul.w	r5, r0, r5
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8104 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8101 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xc0>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ea 	beq.w	80004dc <__udivmoddi4+0x288>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d148      	bne.n	80003ae <__udivmoddi4+0x15a>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xd2>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4696      	mov	lr, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa6>
 8000334:	e9c6 4e00 	strd	r4, lr, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa6>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xea>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 808e 	bne.w	8000464 <__udivmoddi4+0x210>
 8000348:	1a88      	subs	r0, r1, r2
 800034a:	2101      	movs	r1, #1
 800034c:	0c17      	lsrs	r7, r2, #16
 800034e:	fa1f fe82 	uxth.w	lr, r2
 8000352:	fbb0 f5f7 	udiv	r5, r0, r7
 8000356:	fb07 0015 	mls	r0, r7, r5, r0
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb0e f005 	mul.w	r0, lr, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x126>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4290      	cmp	r0, r2
 8000374:	f200 80cc 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 8000378:	4645      	mov	r5, r8
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x150>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14e>
 800039c:	45a6      	cmp	lr, r4
 800039e:	f200 80b4 	bhi.w	800050a <__udivmoddi4+0x2b6>
 80003a2:	4610      	mov	r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ac:	e7a0      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	408b      	lsls	r3, r1
 80003b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	fbba f8f9 	udiv	r8, sl, r9
 80003c8:	408d      	lsls	r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	432b      	orrs	r3, r5
 80003d8:	fa00 f501 	lsl.w	r5, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	0c1c      	lsrs	r4, r3, #16
 80003e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e6:	42a0      	cmp	r0, r4
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	d90b      	bls.n	8000406 <__udivmoddi4+0x1b2>
 80003ee:	eb1c 0404 	adds.w	r4, ip, r4
 80003f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f6:	f080 8086 	bcs.w	8000506 <__udivmoddi4+0x2b2>
 80003fa:	42a0      	cmp	r0, r4
 80003fc:	f240 8083 	bls.w	8000506 <__udivmoddi4+0x2b2>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4464      	add	r4, ip
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	b298      	uxth	r0, r3
 800040a:	fbb4 f3f9 	udiv	r3, r4, r9
 800040e:	fb09 4413 	mls	r4, r9, r3, r4
 8000412:	fb03 fe0e 	mul.w	lr, r3, lr
 8000416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d26a      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d968      	bls.n	80004fe <__udivmoddi4+0x2aa>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 9302 	umull	r9, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c8      	mov	r8, r9
 8000440:	469e      	mov	lr, r3
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d067      	beq.n	800051a <__udivmoddi4+0x2c6>
 800044a:	ebb5 0308 	subs.w	r3, r5, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	40cb      	lsrs	r3, r1
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	431f      	orrs	r7, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	2100      	movs	r1, #0
 8000462:	e74a      	b.n	80002fa <__udivmoddi4+0xa6>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0020 	rsb	r0, r3, #32
 800046c:	40c1      	lsrs	r1, r0
 800046e:	409d      	lsls	r5, r3
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	4328      	orrs	r0, r5
 800047a:	fbb1 f5f7 	udiv	r5, r1, r7
 800047e:	fb07 1115 	mls	r1, r7, r5, r1
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	0c02      	lsrs	r2, r0, #16
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	fa04 f403 	lsl.w	r4, r4, r3
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x256>
 8000498:	eb1c 0202 	adds.w	r2, ip, r2
 800049c:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a0:	d22f      	bcs.n	8000502 <__udivmoddi4+0x2ae>
 80004a2:	4291      	cmp	r1, r2
 80004a4:	d92d      	bls.n	8000502 <__udivmoddi4+0x2ae>
 80004a6:	3d02      	subs	r5, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a52      	subs	r2, r2, r1
 80004ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80004b0:	fb07 2211 	mls	r2, r7, r1, r2
 80004b4:	b280      	uxth	r0, r0
 80004b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ba:	fb01 f20e 	mul.w	r2, r1, lr
 80004be:	4282      	cmp	r2, r0
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x280>
 80004c2:	eb1c 0000 	adds.w	r0, ip, r0
 80004c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ca:	d216      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d914      	bls.n	80004fa <__udivmoddi4+0x2a6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	4460      	add	r0, ip
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70b      	b.n	80002fa <__udivmoddi4+0xa6>
 80004e2:	4671      	mov	r1, lr
 80004e4:	e6e9      	b.n	80002ba <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6fe      	b.n	80002e8 <__udivmoddi4+0x94>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb9 0802 	subs.w	r8, r9, r2
 80004f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a5      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fa:	4641      	mov	r1, r8
 80004fc:	e7ea      	b.n	80004d4 <__udivmoddi4+0x280>
 80004fe:	4603      	mov	r3, r0
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000502:	4645      	mov	r5, r8
 8000504:	e7d1      	b.n	80004aa <__udivmoddi4+0x256>
 8000506:	46d0      	mov	r8, sl
 8000508:	e77d      	b.n	8000406 <__udivmoddi4+0x1b2>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e749      	b.n	80003a4 <__udivmoddi4+0x150>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e731      	b.n	800037a <__udivmoddi4+0x126>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xdc>
 800051a:	4631      	mov	r1, r6
 800051c:	e6ed      	b.n	80002fa <__udivmoddi4+0xa6>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_ADC1_Init+0x74>)
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <MX_ADC1_Init+0x78>)
 8000538:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_ADC1_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_ADC1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_ADC1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_ADC1_Init+0x74>)
 800054e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_ADC1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_ADC1_Init+0x74>)
 800055c:	2201      	movs	r2, #1
 800055e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_ADC1_Init+0x74>)
 8000562:	f000 fbed 	bl	8000d40 <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800056c:	f000 fafa 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000570:	230e      	movs	r3, #14
 8000572:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2301      	movs	r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_ADC1_Init+0x74>)
 8000582:	f000 fcb5 	bl	8000ef0 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800058c:	f000 faea 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	40012400 	.word	0x40012400

080005a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_ADC2_Init+0x74>)
 80005b2:	4a19      	ldr	r2, [pc, #100]	; (8000618 <MX_ADC2_Init+0x78>)
 80005b4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_ADC2_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_ADC2_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_ADC2_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_ADC2_Init+0x74>)
 80005ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005ce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_ADC2_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_ADC2_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <MX_ADC2_Init+0x74>)
 80005de:	f000 fbaf 	bl	8000d40 <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80005e8:	f000 fabc 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005ec:	230a      	movs	r3, #10
 80005ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_ADC2_Init+0x74>)
 80005fe:	f000 fc77 	bl	8000ef0 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000608:	f000 faac 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000058 	.word	0x20000058
 8000618:	40012800 	.word	0x40012800

0800061c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <HAL_ADC_MspInit+0xbc>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d122      	bne.n	8000682 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a26      	ldr	r2, [pc, #152]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a20      	ldr	r2, [pc, #128]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800066c:	2330      	movs	r3, #48	; 0x30
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	4619      	mov	r1, r3
 800067a:	4819      	ldr	r0, [pc, #100]	; (80006e0 <HAL_ADC_MspInit+0xc4>)
 800067c:	f000 ff50 	bl	8001520 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000680:	e026      	b.n	80006d0 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_ADC_MspInit+0xc8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d121      	bne.n	80006d0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 8000692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_ADC_MspInit+0xc0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006bc:	230f      	movs	r3, #15
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	2303      	movs	r3, #3
 80006c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <HAL_ADC_MspInit+0xc4>)
 80006cc:	f000 ff28 	bl	8001520 <HAL_GPIO_Init>
}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40012400 	.word	0x40012400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40011000 	.word	0x40011000
 80006e4:	40012800 	.word	0x40012800

080006e8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_CAN1_Init+0x60>)
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <MX_CAN1_Init+0x64>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_CAN1_Init+0x60>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_CAN1_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_CAN1_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_CAN1_Init+0x60>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_CAN1_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_CAN1_Init+0x60>)
 8000712:	2200      	movs	r2, #0
 8000714:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_CAN1_Init+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_CAN1_Init+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_CAN1_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_CAN1_Init+0x60>)
 800072a:	2200      	movs	r2, #0
 800072c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_CAN1_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_CAN1_Init+0x60>)
 8000736:	f000 fd14 	bl	8001162 <HAL_CAN_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 fa10 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000088 	.word	0x20000088
 800074c:	40006400 	.word	0x40006400

08000750 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_CAN2_Init+0x64>)
 8000758:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_CAN2_Init+0x60>)
 800075c:	2210      	movs	r2, #16
 800075e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_CAN2_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_CAN2_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_CAN2_Init+0x60>)
 800078c:	2200      	movs	r2, #0
 800078e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_CAN2_Init+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_CAN2_Init+0x60>)
 800079e:	f000 fce0 	bl	8001162 <HAL_CAN_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f9dc 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000b0 	.word	0x200000b0
 80007b4:	40006800 	.word	0x40006800

080007b8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a50      	ldr	r2, [pc, #320]	; (8000914 <HAL_CAN_MspInit+0x15c>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d14d      	bne.n	8000874 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80007d8:	4b4f      	ldr	r3, [pc, #316]	; (8000918 <HAL_CAN_MspInit+0x160>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a4e      	ldr	r2, [pc, #312]	; (8000918 <HAL_CAN_MspInit+0x160>)
 80007e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007e2:	4b4d      	ldr	r3, [pc, #308]	; (8000918 <HAL_CAN_MspInit+0x160>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10b      	bne.n	8000802 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80007ea:	4b4c      	ldr	r3, [pc, #304]	; (800091c <HAL_CAN_MspInit+0x164>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a4b      	ldr	r2, [pc, #300]	; (800091c <HAL_CAN_MspInit+0x164>)
 80007f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <HAL_CAN_MspInit+0x164>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b46      	ldr	r3, [pc, #280]	; (800091c <HAL_CAN_MspInit+0x164>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a45      	ldr	r2, [pc, #276]	; (800091c <HAL_CAN_MspInit+0x164>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b43      	ldr	r3, [pc, #268]	; (800091c <HAL_CAN_MspInit+0x164>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800081a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	483c      	ldr	r0, [pc, #240]	; (8000920 <HAL_CAN_MspInit+0x168>)
 8000830:	f000 fe76 	bl	8001520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4835      	ldr	r0, [pc, #212]	; (8000920 <HAL_CAN_MspInit+0x168>)
 800084a:	f000 fe69 	bl	8001520 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <HAL_CAN_MspInit+0x16c>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800086c:	4a2d      	ldr	r2, [pc, #180]	; (8000924 <HAL_CAN_MspInit+0x16c>)
 800086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000872:	e04b      	b.n	800090c <HAL_CAN_MspInit+0x154>
  else if(canHandle->Instance==CAN2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a2b      	ldr	r2, [pc, #172]	; (8000928 <HAL_CAN_MspInit+0x170>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d146      	bne.n	800090c <HAL_CAN_MspInit+0x154>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <HAL_CAN_MspInit+0x164>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a26      	ldr	r2, [pc, #152]	; (800091c <HAL_CAN_MspInit+0x164>)
 8000884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <HAL_CAN_MspInit+0x164>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <HAL_CAN_MspInit+0x160>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <HAL_CAN_MspInit+0x160>)
 800089e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_CAN_MspInit+0x160>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d10b      	bne.n	80008c0 <HAL_CAN_MspInit+0x108>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_CAN_MspInit+0x164>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <HAL_CAN_MspInit+0x164>)
 80008ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_CAN_MspInit+0x164>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_CAN_MspInit+0x164>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a15      	ldr	r2, [pc, #84]	; (800091c <HAL_CAN_MspInit+0x164>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_CAN_MspInit+0x164>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <HAL_CAN_MspInit+0x168>)
 80008ee:	f000 fe17 	bl	8001520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <HAL_CAN_MspInit+0x168>)
 8000908:	f000 fe0a 	bl	8001520 <HAL_GPIO_Init>
}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40006400 	.word	0x40006400
 8000918:	200000d8 	.word	0x200000d8
 800091c:	40021000 	.word	0x40021000
 8000920:	40010c00 	.word	0x40010c00
 8000924:	40010000 	.word	0x40010000
 8000928:	40006800 	.word	0x40006800

0800092c <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
     PA9   ------> USB_OTG_FS_VBUS
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b43      	ldr	r3, [pc, #268]	; (8000a50 <MX_GPIO_Init+0x124>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a42      	ldr	r2, [pc, #264]	; (8000a50 <MX_GPIO_Init+0x124>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <MX_GPIO_Init+0x124>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <MX_GPIO_Init+0x124>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a3c      	ldr	r2, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x124>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <MX_GPIO_Init+0x124>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <MX_GPIO_Init+0x124>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <MX_GPIO_Init+0x124>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <MX_GPIO_Init+0x124>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_GPIO_Init+0x124>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <MX_GPIO_Init+0x124>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_GPIO_Init+0x124>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	482b      	ldr	r0, [pc, #172]	; (8000a54 <MX_GPIO_Init+0x128>)
 80009a6:	f000 ff3f 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009aa:	23f4      	movs	r3, #244	; 0xf4
 80009ac:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	4826      	ldr	r0, [pc, #152]	; (8000a58 <MX_GPIO_Init+0x12c>)
 80009be:	f000 fdaf 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9;
 80009c2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4820      	ldr	r0, [pc, #128]	; (8000a58 <MX_GPIO_Init+0x12c>)
 80009d8:	f000 fda2 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	481a      	ldr	r0, [pc, #104]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009f2:	f000 fd95 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000a0c:	f000 fd88 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <MX_GPIO_Init+0x128>)
 8000a28:	f000 fd7a 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8000a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0x128>)
 8000a42:	f000 fd6d 	bl	8001520 <HAL_GPIO_Init>

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 f90a 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f812 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f7ff ff5e 	bl	800092c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a70:	f7ff fd58 	bl	8000524 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a74:	f7ff fd94 	bl	80005a0 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000a78:	f7ff fe36 	bl	80006e8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000a7c:	f7ff fe68 	bl	8000750 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	4801      	ldr	r0, [pc, #4]	; (8000a8c <main+0x2c>)
 8000a86:	f000 fecf 	bl	8001828 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <main+0x2a>
 8000a8c:	40011000 	.word	0x40011000

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	; 0x70
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9a:	2238      	movs	r2, #56	; 0x38
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fce6 	bl	8002470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fcd8 	bl	8002470 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000aca:	2304      	movs	r3, #4
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ae2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ae6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000aec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000af0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 feac 	bl	8001858 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b06:	f000 f82d 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f9ac 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b32:	f000 f817 	bl	8000b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b36:	2302      	movs	r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fb62 	bl	800220c <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b4e:	f000 f809 	bl	8000b64 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000b52:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <SystemClock_Config+0xd0>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	3770      	adds	r7, #112	; 0x70
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	42420070 	.word	0x42420070

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_MspInit+0x60>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_MspInit+0x60>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 f875 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
	...

08000c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c30:	f7ff fff7 	bl	8000c22 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c36:	490c      	ldr	r1, [pc, #48]	; (8000c68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c38:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c4c:	4c09      	ldr	r4, [pc, #36]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c5a:	f001 fc11 	bl	8002480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5e:	f7ff feff 	bl	8000a60 <main>
  bx lr
 8000c62:	4770      	bx	lr
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c6c:	08002520 	.word	0x08002520
  ldr r2, =_sbss
 8000c70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c74:	200000e0 	.word	0x200000e0

08000c78 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_2_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x28>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x28>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 fc13 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	200f      	movs	r0, #15
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff ff6a 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fc1d 	bl	8001506 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 fbf3 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_IncTick+0x20>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200000dc 	.word	0x200000dc

08000d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_GetTick+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	200000dc 	.word	0x200000dc

08000d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e0be      	b.n	8000ee0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d109      	bne.n	8000d84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fc4c 	bl	800061c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f9ab 	bl	80010e0 <ADC_ConversionStop_Disable>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8099 	bne.w	8000ece <HAL_ADC_Init+0x18e>
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8095 	bne.w	8000ece <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dac:	f023 0302 	bic.w	r3, r3, #2
 8000db0:	f043 0202 	orr.w	r2, r3, #2
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7b1b      	ldrb	r3, [r3, #12]
 8000dc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd8:	d003      	beq.n	8000de2 <HAL_ADC_Init+0xa2>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d102      	bne.n	8000de8 <HAL_ADC_Init+0xa8>
 8000de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de6:	e000      	b.n	8000dea <HAL_ADC_Init+0xaa>
 8000de8:	2300      	movs	r3, #0
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7d1b      	ldrb	r3, [r3, #20]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d119      	bne.n	8000e2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7b1b      	ldrb	r3, [r3, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d109      	bne.n	8000e14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	035a      	lsls	r2, r3, #13
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	e00b      	b.n	8000e2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	f043 0220 	orr.w	r2, r3, #32
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	f043 0201 	orr.w	r2, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <HAL_ADC_Init+0x1a8>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	430b      	orrs	r3, r1
 8000e52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e5c:	d003      	beq.n	8000e66 <HAL_ADC_Init+0x126>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d104      	bne.n	8000e70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	051b      	lsls	r3, r3, #20
 8000e6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_ADC_Init+0x1ac>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d10b      	bne.n	8000eac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9e:	f023 0303 	bic.w	r3, r3, #3
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eaa:	e018      	b.n	8000ede <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	f023 0312 	bic.w	r3, r3, #18
 8000eb4:	f043 0210 	orr.w	r2, r3, #16
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	f043 0201 	orr.w	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ecc:	e007      	b.n	8000ede <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	f043 0210 	orr.w	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	ffe1f7fd 	.word	0xffe1f7fd
 8000eec:	ff1f0efe 	.word	0xff1f0efe

08000ef0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x20>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e0dc      	b.n	80010ca <HAL_ADC_ConfigChannel+0x1da>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b06      	cmp	r3, #6
 8000f1e:	d81c      	bhi.n	8000f5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	3b05      	subs	r3, #5
 8000f32:	221f      	movs	r2, #31
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4019      	ands	r1, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	3b05      	subs	r3, #5
 8000f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
 8000f58:	e03c      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d81c      	bhi.n	8000f9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	3b23      	subs	r3, #35	; 0x23
 8000f74:	221f      	movs	r2, #31
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	4019      	ands	r1, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3b23      	subs	r3, #35	; 0x23
 8000f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9a:	e01b      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	3b41      	subs	r3, #65	; 0x41
 8000fae:	221f      	movs	r2, #31
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4019      	ands	r1, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3b41      	subs	r3, #65	; 0x41
 8000fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	d91c      	bls.n	8001016 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68d9      	ldr	r1, [r3, #12]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	3b1e      	subs	r3, #30
 8000fee:	2207      	movs	r2, #7
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4019      	ands	r1, r3
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	6898      	ldr	r0, [r3, #8]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	3b1e      	subs	r3, #30
 8001008:	fa00 f203 	lsl.w	r2, r0, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	e019      	b.n	800104a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6919      	ldr	r1, [r3, #16]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	2207      	movs	r2, #7
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	4019      	ands	r1, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	fa00 f203 	lsl.w	r2, r0, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b10      	cmp	r3, #16
 8001050:	d003      	beq.n	800105a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001056:	2b11      	cmp	r3, #17
 8001058:	d132      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d125      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d126      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001080:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d11a      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_ADC_ConfigChannel+0x1ec>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9a      	lsrs	r2, r3, #18
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a0:	e002      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f9      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x1b2>
 80010ae:	e007      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	f043 0220 	orr.w	r2, r3, #32
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40012400 	.word	0x40012400
 80010d8:	20000000 	.word	0x20000000
 80010dc:	431bde83 	.word	0x431bde83

080010e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d12e      	bne.n	8001158 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800110a:	f7ff fe0f 	bl	8000d2c <HAL_GetTick>
 800110e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001110:	e01b      	b.n	800114a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001112:	f7ff fe0b 	bl	8000d2c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d914      	bls.n	800114a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b01      	cmp	r3, #1
 800112c:	d10d      	bne.n	800114a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e007      	b.n	800115a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d0dc      	beq.n	8001112 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0ed      	b.n	8001350 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fb19 	bl	80007b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001196:	f7ff fdc9 	bl	8000d2c <HAL_GetTick>
 800119a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800119c:	e012      	b.n	80011c4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800119e:	f7ff fdc5 	bl	8000d2c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b0a      	cmp	r3, #10
 80011aa:	d90b      	bls.n	80011c4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2205      	movs	r2, #5
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0c5      	b.n	8001350 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0e5      	beq.n	800119e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0202 	bic.w	r2, r2, #2
 80011e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e2:	f7ff fda3 	bl	8000d2c <HAL_GetTick>
 80011e6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e8:	e012      	b.n	8001210 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011ea:	f7ff fd9f 	bl	8000d2c <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b0a      	cmp	r3, #10
 80011f6:	d90b      	bls.n	8001210 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2205      	movs	r2, #5
 8001208:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e09f      	b.n	8001350 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1e5      	bne.n	80011ea <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7e1b      	ldrb	r3, [r3, #24]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e5b      	ldrb	r3, [r3, #25]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7e9b      	ldrb	r3, [r3, #26]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0220 	orr.w	r2, r2, #32
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e007      	b.n	800129c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0220 	bic.w	r2, r2, #32
 800129a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7edb      	ldrb	r3, [r3, #27]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0210 	bic.w	r2, r2, #16
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0210 	orr.w	r2, r2, #16
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7f1b      	ldrb	r3, [r3, #28]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0208 	orr.w	r2, r2, #8
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e007      	b.n	80012f0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0208 	bic.w	r2, r2, #8
 80012ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7f5b      	ldrb	r3, [r3, #29]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d108      	bne.n	800130a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0204 	orr.w	r2, r2, #4
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e007      	b.n	800131a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0204 	bic.w	r2, r2, #4
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	ea42 0103 	orr.w	r1, r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	1e5a      	subs	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff90 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff49 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff5e 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffb0 	bl	8001474 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b08b      	sub	sp, #44	; 0x2c
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e169      	b.n	8001808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001534:	2201      	movs	r2, #1
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8158 	bne.w	8001802 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a9a      	ldr	r2, [pc, #616]	; (80017c0 <HAL_GPIO_Init+0x2a0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d05e      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800155c:	4a98      	ldr	r2, [pc, #608]	; (80017c0 <HAL_GPIO_Init+0x2a0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d875      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001562:	4a98      	ldr	r2, [pc, #608]	; (80017c4 <HAL_GPIO_Init+0x2a4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d058      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001568:	4a96      	ldr	r2, [pc, #600]	; (80017c4 <HAL_GPIO_Init+0x2a4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d86f      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800156e:	4a96      	ldr	r2, [pc, #600]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d052      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001574:	4a94      	ldr	r2, [pc, #592]	; (80017c8 <HAL_GPIO_Init+0x2a8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d869      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800157a:	4a94      	ldr	r2, [pc, #592]	; (80017cc <HAL_GPIO_Init+0x2ac>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d04c      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001580:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_GPIO_Init+0x2ac>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d863      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001586:	4a92      	ldr	r2, [pc, #584]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d046      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800158c:	4a90      	ldr	r2, [pc, #576]	; (80017d0 <HAL_GPIO_Init+0x2b0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d85d      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001592:	2b12      	cmp	r3, #18
 8001594:	d82a      	bhi.n	80015ec <HAL_GPIO_Init+0xcc>
 8001596:	2b12      	cmp	r3, #18
 8001598:	d859      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <HAL_GPIO_Init+0x80>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	0800161b 	.word	0x0800161b
 80015a4:	080015f5 	.word	0x080015f5
 80015a8:	08001607 	.word	0x08001607
 80015ac:	08001649 	.word	0x08001649
 80015b0:	0800164f 	.word	0x0800164f
 80015b4:	0800164f 	.word	0x0800164f
 80015b8:	0800164f 	.word	0x0800164f
 80015bc:	0800164f 	.word	0x0800164f
 80015c0:	0800164f 	.word	0x0800164f
 80015c4:	0800164f 	.word	0x0800164f
 80015c8:	0800164f 	.word	0x0800164f
 80015cc:	0800164f 	.word	0x0800164f
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	0800164f 	.word	0x0800164f
 80015dc:	0800164f 	.word	0x0800164f
 80015e0:	0800164f 	.word	0x0800164f
 80015e4:	080015fd 	.word	0x080015fd
 80015e8:	08001611 	.word	0x08001611
 80015ec:	4a79      	ldr	r2, [pc, #484]	; (80017d4 <HAL_GPIO_Init+0x2b4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015f2:	e02c      	b.n	800164e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e029      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	3304      	adds	r3, #4
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e024      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	3308      	adds	r3, #8
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e01f      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	330c      	adds	r3, #12
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e01a      	b.n	8001650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001622:	2304      	movs	r3, #4
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e013      	b.n	8001650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	611a      	str	r2, [r3, #16]
          break;
 800163a:	e009      	b.n	8001650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	615a      	str	r2, [r3, #20]
          break;
 8001646:	e003      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x130>
          break;
 800164e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2bff      	cmp	r3, #255	; 0xff
 8001654:	d801      	bhi.n	800165a <HAL_GPIO_Init+0x13a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	e001      	b.n	800165e <HAL_GPIO_Init+0x13e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	; 0xff
 8001664:	d802      	bhi.n	800166c <HAL_GPIO_Init+0x14c>
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x152>
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	3b08      	subs	r3, #8
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	210f      	movs	r1, #15
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	6a39      	ldr	r1, [r7, #32]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80b1 	beq.w	8001802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a0:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b8:	4a48      	ldr	r2, [pc, #288]	; (80017dc <HAL_GPIO_Init+0x2bc>)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <HAL_GPIO_Init+0x2c0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_GPIO_Init+0x1ec>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a3f      	ldr	r2, [pc, #252]	; (80017e4 <HAL_GPIO_Init+0x2c4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1e8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <HAL_GPIO_Init+0x2c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1e4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3d      	ldr	r2, [pc, #244]	; (80017ec <HAL_GPIO_Init+0x2cc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1e0>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e006      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001700:	2304      	movs	r3, #4
 8001702:	e004      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001704:	2302      	movs	r3, #2
 8001706:	e002      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 800170c:	2300      	movs	r3, #0
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	f002 0203 	and.w	r2, r2, #3
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	4093      	lsls	r3, r2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171e:	492f      	ldr	r1, [pc, #188]	; (80017dc <HAL_GPIO_Init+0x2bc>)
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	492c      	ldr	r1, [pc, #176]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4928      	ldr	r1, [pc, #160]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	4922      	ldr	r1, [pc, #136]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	491e      	ldr	r1, [pc, #120]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001778:	4013      	ands	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4918      	ldr	r1, [pc, #96]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	4914      	ldr	r1, [pc, #80]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d021      	beq.n	80017f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e021      	b.n	8001802 <HAL_GPIO_Init+0x2e2>
 80017be:	bf00      	nop
 80017c0:	10320000 	.word	0x10320000
 80017c4:	10310000 	.word	0x10310000
 80017c8:	10220000 	.word	0x10220000
 80017cc:	10210000 	.word	0x10210000
 80017d0:	10120000 	.word	0x10120000
 80017d4:	10110000 	.word	0x10110000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40011400 	.word	0x40011400
 80017f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_GPIO_Init+0x304>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	4909      	ldr	r1, [pc, #36]	; (8001824 <HAL_GPIO_Init+0x304>)
 80017fe:	4013      	ands	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3301      	adds	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	f47f ae8e 	bne.w	8001534 <HAL_GPIO_Init+0x14>
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	372c      	adds	r7, #44	; 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e304      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00c      	beq.n	800189e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
 8001890:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06c      	beq.n	8001984 <HAL_RCC_OscConfig+0x12c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d168      	bne.n	8001984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e2de      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x76>
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x98>
 80018d6:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0xbc>
 80018fa:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a71      	ldr	r2, [pc, #452]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 8001914:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff f9fa 	bl	8000d2c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff f9f6 	bl	8000d2c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e292      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xe4>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff f9e6 	bl	8000d2c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff f9e2 	bl	8000d2c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e27e      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x10c>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e252      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4939      	ldr	r1, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff f99b 	bl	8000d2c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff f997 	bl	8000d2c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e233      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff f97a 	bl	8000d2c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f976 	bl	8000d2c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e212      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03a      	beq.n	8001adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d019      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff f95a 	bl	8000d2c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f956 	bl	8000d2c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1f2      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fb98 	bl	80021d0 <RCC_Delay>
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f940 	bl	8000d2c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	e00f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f93c 	bl	8000d2c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1d8      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	42420000 	.word	0x42420000
 8001acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b9b      	ldr	r3, [pc, #620]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e9      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a6 	beq.w	8001c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b94      	ldr	r3, [pc, #592]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b91      	ldr	r3, [pc, #580]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a90      	ldr	r2, [pc, #576]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b8e      	ldr	r3, [pc, #568]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a87      	ldr	r2, [pc, #540]	; (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f8fd 	bl	8000d2c <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff f8f9 	bl	8000d2c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e195      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b7e      	ldr	r3, [pc, #504]	; (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x312>
 8001b5c:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a77      	ldr	r2, [pc, #476]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e02d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x334>
 8001b72:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a72      	ldr	r2, [pc, #456]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	e01c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x356>
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a69      	ldr	r2, [pc, #420]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4b67      	ldr	r3, [pc, #412]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a66      	ldr	r2, [pc, #408]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001bae:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a63      	ldr	r2, [pc, #396]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a60      	ldr	r2, [pc, #384]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d015      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f8ad 	bl	8000d2c <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff f8a9 	bl	8000d2c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e143      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	4b54      	ldr	r3, [pc, #336]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ee      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f897 	bl	8000d2c <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f893 	bl	8000d2c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e12d      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a44      	ldr	r2, [pc, #272]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 808c 	beq.w	8001d58 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c40:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001c5a:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e103      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d14e      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001c80:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0ef      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_RCC_OscConfig+0x4f0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f847 	bl	8000d2c <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001ca2:	f7ff f843 	bl	8000d2c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0df      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	491c      	ldr	r1, [pc, #112]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4918      	ldr	r1, [pc, #96]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_RCC_OscConfig+0x4f0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff f81f 	bl	8000d2c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001cf2:	f7ff f81b 	bl	8000d2c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	; 0x64
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0b7      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x49a>
 8001d10:	e022      	b.n	8001d58 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_OscConfig+0x4f0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff f802 	bl	8000d2c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001d2c:	f7fe fffe 	bl	8000d2c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d908      	bls.n	8001d4c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e09a      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40007000 	.word	0x40007000
 8001d48:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e9      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8088 	beq.w	8001e72 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d068      	beq.n	8001e40 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d14d      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <HAL_RCC_OscConfig+0x628>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ffd6 	bl	8000d2c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe ffd2 	bl	8000d2c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e06e      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d10f      	bne.n	8001dcc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4931      	ldr	r1, [pc, #196]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	f023 020f 	bic.w	r2, r3, #15
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x628>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe ff9f 	bl	8000d2c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe ff9b 	bl	8000d2c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x59a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x628>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe ff88 	bl	8000d2c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe ff84 	bl	8000d2c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c8>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	42420060 	.word	0x42420060

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe feda 	bl	8000d2c <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fed6 	bl	8000d2c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fe38 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	080024e0 	.word	0x080024e0
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800205c:	b08e      	sub	sp, #56	; 0x38
 800205e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
 8002068:	2300      	movs	r3, #0
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207c:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b04      	cmp	r3, #4
 800208a:	d002      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x3a>
 800208c:	2b08      	cmp	r3, #8
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x40>
 8002090:	e089      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_GetSysClockFreq+0x164>)
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002096:	e089      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80020a2:	5c9b      	ldrb	r3, [r3, r2]
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d072      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80020b0:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f003 020f 	and.w	r2, r3, #15
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d053      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	3301      	adds	r3, #1
 80020d6:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80020d8:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3302      	adds	r3, #2
 80020e4:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2200      	movs	r2, #0
 80020ea:	469a      	mov	sl, r3
 80020ec:	4693      	mov	fp, r2
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	2200      	movs	r2, #0
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	617a      	str	r2, [r7, #20]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	fb03 f20b 	mul.w	r2, r3, fp
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fb0a f303 	mul.w	r3, sl, r3
 8002102:	4413      	add	r3, r2
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	fbaa 0102 	umull	r0, r1, sl, r2
 800210a:	440b      	add	r3, r1
 800210c:	4619      	mov	r1, r3
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_GetSysClockFreq+0x164>)
 8002110:	fb03 f201 	mul.w	r2, r3, r1
 8002114:	2300      	movs	r3, #0
 8002116:	fb00 f303 	mul.w	r3, r0, r3
 800211a:	4413      	add	r3, r2
 800211c:	4a27      	ldr	r2, [pc, #156]	; (80021bc <HAL_RCC_GetSysClockFreq+0x164>)
 800211e:	fba0 4502 	umull	r4, r5, r0, r2
 8002122:	442b      	add	r3, r5
 8002124:	461d      	mov	r5, r3
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	2200      	movs	r2, #0
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	60fa      	str	r2, [r7, #12]
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	2200      	movs	r2, #0
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800213a:	460b      	mov	r3, r1
 800213c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002140:	4652      	mov	r2, sl
 8002142:	fb02 f203 	mul.w	r2, r2, r3
 8002146:	465b      	mov	r3, fp
 8002148:	4684      	mov	ip, r0
 800214a:	fb0c f303 	mul.w	r3, ip, r3
 800214e:	4413      	add	r3, r2
 8002150:	4602      	mov	r2, r0
 8002152:	4651      	mov	r1, sl
 8002154:	fba2 8901 	umull	r8, r9, r2, r1
 8002158:	444b      	add	r3, r9
 800215a:	4699      	mov	r9, r3
 800215c:	4642      	mov	r2, r8
 800215e:	464b      	mov	r3, r9
 8002160:	4620      	mov	r0, r4
 8002162:	4629      	mov	r1, r5
 8002164:	f7fe f85e 	bl	8000224 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4613      	mov	r3, r2
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
 8002170:	e007      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_RCC_GetSysClockFreq+0x164>)
 8002176:	fb03 f202 	mul.w	r2, r3, r2
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002184:	7b5b      	ldrb	r3, [r3, #13]
 8002186:	461a      	mov	r2, r3
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
 8002194:	e004      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x170>)
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80021a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021a4:	e002      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_GetSysClockFreq+0x174>)
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3738      	adds	r7, #56	; 0x38
 80021b2:	46bd      	mov	sp, r7
 80021b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	017d7840 	.word	0x017d7840
 80021c0:	080024f0 	.word	0x080024f0
 80021c4:	08002500 	.word	0x08002500
 80021c8:	003d0900 	.word	0x003d0900
 80021cc:	007a1200 	.word	0x007a1200

080021d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <RCC_Delay+0x34>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <RCC_Delay+0x38>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0a5b      	lsrs	r3, r3, #9
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ec:	bf00      	nop
  }
  while (Delay --);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e5a      	subs	r2, r3, #1
 80021f2:	60fa      	str	r2, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f9      	bne.n	80021ec <RCC_Delay+0x1c>
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000000 	.word	0x20000000
 8002208:	10624dd3 	.word	0x10624dd3

0800220c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d07d      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002230:	4b8b      	ldr	r3, [pc, #556]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a87      	ldr	r2, [pc, #540]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	61d3      	str	r3, [r2, #28]
 8002248:	4b85      	ldr	r3, [pc, #532]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002254:	2301      	movs	r3, #1
 8002256:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b82      	ldr	r3, [pc, #520]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d118      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002264:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a7e      	ldr	r2, [pc, #504]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002270:	f7fe fd5c 	bl	8000d2c <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	e008      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fd58 	bl	8000d2c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0e5      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b76      	ldr	r3, [pc, #472]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002296:	4b72      	ldr	r3, [pc, #456]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d02e      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d027      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022bc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022be:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ca:	4a65      	ldr	r2, [pc, #404]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d014      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe fd27 	bl	8000d2c <HAL_GetTick>
 80022de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe fd23 	bl	8000d2c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0ae      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002304:	4b56      	ldr	r3, [pc, #344]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4953      	ldr	r1, [pc, #332]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002312:	4313      	orrs	r3, r2
 8002314:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002316:	7efb      	ldrb	r3, [r7, #27]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4a4f      	ldr	r2, [pc, #316]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002326:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002334:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4947      	ldr	r1, [pc, #284]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002352:	4b43      	ldr	r3, [pc, #268]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4940      	ldr	r1, [pc, #256]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002360:	4313      	orrs	r3, r2
 8002362:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	4938      	ldr	r1, [pc, #224]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800237e:	4313      	orrs	r3, r2
 8002380:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002382:	4b37      	ldr	r3, [pc, #220]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800238e:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d148      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80023a4:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d138      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e042      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80023d0:	4b23      	ldr	r3, [pc, #140]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4920      	ldr	r1, [pc, #128]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	491c      	ldr	r1, [pc, #112]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe fc97 	bl	8000d2c <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002402:	f7fe fc93 	bl	8000d2c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e020      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002420:	e009      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	429a      	cmp	r2, r3
 8002430:	d001      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420440 	.word	0x42420440
 800246c:	42420070 	.word	0x42420070

08002470 <memset>:
 8002470:	4603      	mov	r3, r0
 8002472:	4402      	add	r2, r0
 8002474:	4293      	cmp	r3, r2
 8002476:	d100      	bne.n	800247a <memset+0xa>
 8002478:	4770      	bx	lr
 800247a:	f803 1b01 	strb.w	r1, [r3], #1
 800247e:	e7f9      	b.n	8002474 <memset+0x4>

08002480 <__libc_init_array>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	2600      	movs	r6, #0
 8002484:	4d0c      	ldr	r5, [pc, #48]	; (80024b8 <__libc_init_array+0x38>)
 8002486:	4c0d      	ldr	r4, [pc, #52]	; (80024bc <__libc_init_array+0x3c>)
 8002488:	1b64      	subs	r4, r4, r5
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	42a6      	cmp	r6, r4
 800248e:	d109      	bne.n	80024a4 <__libc_init_array+0x24>
 8002490:	f000 f81a 	bl	80024c8 <_init>
 8002494:	2600      	movs	r6, #0
 8002496:	4d0a      	ldr	r5, [pc, #40]	; (80024c0 <__libc_init_array+0x40>)
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <__libc_init_array+0x44>)
 800249a:	1b64      	subs	r4, r4, r5
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	42a6      	cmp	r6, r4
 80024a0:	d105      	bne.n	80024ae <__libc_init_array+0x2e>
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a8:	4798      	blx	r3
 80024aa:	3601      	adds	r6, #1
 80024ac:	e7ee      	b.n	800248c <__libc_init_array+0xc>
 80024ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b2:	4798      	blx	r3
 80024b4:	3601      	adds	r6, #1
 80024b6:	e7f2      	b.n	800249e <__libc_init_array+0x1e>
 80024b8:	08002518 	.word	0x08002518
 80024bc:	08002518 	.word	0x08002518
 80024c0:	08002518 	.word	0x08002518
 80024c4:	0800251c 	.word	0x0800251c

080024c8 <_init>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	bf00      	nop
 80024cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ce:	bc08      	pop	{r3}
 80024d0:	469e      	mov	lr, r3
 80024d2:	4770      	bx	lr

080024d4 <_fini>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr
